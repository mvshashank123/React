{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","center","casesType","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","name","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setInputCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getCountriesData","iso2","todayCases","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6aAwBeA,MApBf,YAA8D,IAA5CC,EAA2C,EAA3CA,MAAMC,EAAqC,EAArCA,MAAMC,EAA+B,EAA/BA,MAAMC,EAAyB,EAAzBA,OAAOC,EAAkB,EAAlBA,MAAUC,EAAQ,0DACzD,OACI,kBAACC,EAAA,EAAD,CACAC,QAASF,EAAME,QACfC,UAAS,kBAAaL,GAAU,oBAAvB,YACLC,GAAS,iBAET,kBAACK,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBACxCX,GAEL,wBAAIQ,UAAS,0BAAqBJ,GAAS,0BAA4BH,GACvE,kBAACS,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBAA7C,SACOT,M,sECbjBU,EAAkB,CACpBX,MAAO,CACLY,IAAK,UACLC,WAAY,KAEdC,UAAW,CACTF,IAAK,UACLC,WAAY,MAEdE,OAAQ,CACNH,IAAK,UACLC,WAAY,MAILG,EAAS,SAACC,GACnB,IAAMC,EAAW,YAAID,GAUrB,OARAC,EAAWC,MAAK,SAACC,EAAEC,GACf,OAAGD,EAAEpB,MAAMqB,EAAErB,OACD,EAGD,KAGRkB,GAKEI,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MChB/BC,MAff,YAAkD,IAApCC,EAAmC,EAAnCA,UAAUC,EAAyB,EAAzBA,OAAOC,EAAkB,EAAlBA,UAAWC,EAAO,EAAPA,KACtC,OACI,yBAAKvB,UAAU,OACX,kBAAC,IAAD,CAAYqB,OAAQA,EAAQE,KAAMA,GACtC,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2ED8BK,SAAChB,GAAD,IAAMY,EAAN,uDAAgB,QAAhB,OACvBZ,EAAKiB,KAAI,SAAAC,GAAO,OACZ,kBAACC,EAAA,EAAD,CACAR,OAAQ,CAACO,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACtD7B,MAAOC,EAAgBkB,GAAWjB,IAClC4B,UAAW7B,EAAgBkB,GAAWjB,IACtC6B,YAAa,GACbC,OACEC,KAAKC,KAAKT,EAAQN,IAAclB,EAAgBkB,GAAWhB,YAG7D,kBAACgC,EAAA,EAAD,KACE,yBAAKtC,UAAU,kBACb,yBACEA,UAAU,YACVuC,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QAE1B,yBAAKzC,UAAU,aAAa4B,EAAQA,SACpC,yBAAK5B,UAAU,kBAAf,UACUiB,IAAQW,EAAQnC,OAAOyB,OAAO,QAExC,yBAAKlB,UAAU,kBAAf,cACciB,IAAQW,EAAQrB,WAAWW,OAAO,QAEhD,yBAAKlB,UAAU,eAAf,WACWiB,IAAQW,EAAQpB,QAAQU,OAAO,cCrD7CwB,CAActB,EAAUE,M,OCMlBqB,MAff,YAA6B,IAAbvB,EAAY,EAAZA,UACZ,OACI,yBAAKpB,UAAU,SACVoB,EAAUO,KAAI,gBAAEiB,EAAF,EAAEA,KAAKnD,EAAP,EAAOA,MAAP,OACX,4BACI,4BAAKmD,GACL,4BACI,gCAASnD,U,QCP3BoD,EAAQ,CACVC,OAAQ,CACJC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLd,OAAQ,IAGlBe,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAa9C,GAC5B,OAAOO,IAAQuC,EAAYC,OAAOvC,OAAO,WAI/CwC,OAAQ,CACJC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJ3C,OAAQ,WACR4C,cAAe,QAIrBC,MAAO,CACH,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CAELC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAOnD,IAAQwC,GAAOvC,OAAO,YA+D5BmD,MArDf,YAA0C,IAAtB/C,EAAqB,EAArBA,UAAazB,EAAQ,+BAChByE,mBAAS,IADO,mBAC9B5D,EAD8B,KACzB6D,EADyB,KAG/BC,EAAgB,SAAC9D,EAAKY,GACxB,IACImD,EADEC,EAAU,GAEhB,IAAI,IAAIC,KAAQjE,EAAKjB,MAAM,CACvB,GAAGgF,EAAc,CACb,IAAMG,EAAa,CACfC,EAAEF,EACFG,EAAEpE,EAAI,MAAUiE,GAAOF,GAE3BC,EAAUK,KAAKH,GAEnBH,EAAc/D,EAAKY,GAAWqD,GAElC,OAAOD,GAmBX,OAhBAM,qBAAU,YACS,uCAAC,sBAAAnE,EAAA,sEACNoE,MAAM,8DACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACxE,GACH6D,EAAQ7D,GACR2E,QAAQC,IAAI5E,GACZ,IAAMgE,EAAUF,EAAe9D,EAAKY,GACpCiD,EAAQG,MAPA,2CAAD,qDAUXa,KACF,CAACjE,IAKH,yBAAKtB,UAAWH,EAAMG,YACb,OAAJU,QAAI,IAAJA,OAAA,EAAAA,EAAM8E,QAAO,GACV,kBAAC,OAAD,CACA3C,QAASA,EACTnC,KAAM,CACF+E,SAAS,CAAC,CACNC,gBAAgB,sBAChBC,YAAY,UACZjF,KAAKA,S,OC8BdkF,MAnHf,WAAgB,IAAD,EACkBtB,mBAAS,IAD3B,mBACNlD,EADM,KACIyE,EADJ,OAEsBvB,mBAAS,aAF/B,mBAEN1C,EAFM,KAEGkE,EAFH,OAGwBxB,mBAAS,IAHjC,mBAGNxC,EAHM,KAGMiE,EAHN,OAIoBzB,mBAAS,IAJ7B,mBAIN0B,EAJM,KAIIC,EAJJ,OAKqB3B,mBAAS,CAAEvC,IAAK,SAAUmE,KAAM,UALrD,mBAKNC,EALM,KAKKC,EALL,OAMiB9B,mBAAS,GAN1B,mBAMN+B,EANM,KAMGC,EANH,OAOyBhC,mBAAS,IAPlC,mBAONiC,EAPM,KAOOC,EAPP,OAQmBlC,mBAAS,SAR5B,mBAQNhD,EARM,KAQImF,EARJ,KAUbzB,qBAAU,WACRC,MAAM,sCACLC,MAAK,SAACC,GAAD,OAAYA,EAASC,UAC1BF,MAAK,SAACxE,GACLqF,EAAerF,QAEjB,IAEFsE,qBAAU,WAER,IAAM0B,EAAgB,uCAAG,sBAAA7F,EAAA,sEACjBoE,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAYA,EAASC,UAC1BF,MAAK,SAACxE,GACL,IAAMU,EAAUV,EAAKiB,KAAI,SAACC,GAAD,MACvB,CACAgB,KAAKhB,EAAQA,QACb6B,MAAM7B,EAAQE,YAAY6E,KAC1BlH,MAAMmC,EAAQnC,MACdmH,WAAWhF,EAAQgF,eAGfjG,EAAWF,EAASW,GAC1ByE,EAAazE,GACbiE,QAAQC,IAAIlE,GACZ6E,EAAatF,GACb6F,EAAgB9F,MAhBK,2CAAH,qDAmBtB2E,QAAQC,IAAI,YAAYU,GAExBU,MACA,IAGF,IAAMG,EAAe,uCAAG,WAAOC,GAAP,iBAAAjG,EAAA,6DAChBkG,EAAYD,EAAME,OAAOvD,MAGzBhC,EAAqB,cAAhBsF,EAA8B,qCAA9B,mDACiCA,GALtB,SAOhB9B,MAAMxD,GACXyD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAxE,GACJoF,EAAgBiB,GAChBhB,EAAerF,GAEf0F,EAAa,CAAC1F,EAAKoB,YAAYC,IAAIrB,EAAKoB,YAAYE,OACpDsE,EAAW,MAdS,2CAAH,sDAmBrB,OAFAjB,QAAQC,IAAIxD,GAGV,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,eACf,gDACA,kBAACiH,EAAA,EAAD,CAAajH,UAAU,iBACvB,kBAACkH,EAAA,EAAD,CACQC,QAAQ,WACR1D,MAAO7B,EACPwF,SAAUP,GAEf,kBAACQ,EAAA,EAAD,CAAU5D,MAAM,aAAhB,aAEGrC,EAAUO,KAAI,SAACC,GAAD,OACZ,kBAACyF,EAAA,EAAD,CAAU5D,MAAO7B,EAAQ6B,OAAQ7B,EAAQgB,YAMjD,yBAAK5C,UAAU,cACb,kBAAC,EAAD,CAASD,QAAS,SAAAuH,GAAC,OAAGb,EAAa,UAAU9G,OAAsB,UAAd2B,EAAuB9B,MAAM,oBAAoBI,OAAK,EAACF,MAAOqB,EAAgBe,EAAYrC,OAAQA,MAAOsB,EAAgBe,EAAY8E,cAC1L,kBAAC,EAAD,CAAS7G,QAAS,SAAAuH,GAAC,OAAEb,EAAa,cAAc9G,OAAsB,cAAd2B,EAA2B9B,MAAM,YAAYE,MAAOqB,EAAgBe,EAAYvB,WAAYd,MAAOsB,EAAgBe,EAAYyF,kBACvL,kBAAC,EAAD,CAASxH,QAAS,SAAAuH,GAAC,OAAEb,EAAa,WAAW9G,OAAsB,WAAd2B,EAAwB9B,MAAM,SAASI,OAAK,EAACF,MAAOqB,EAAgBe,EAAYtB,QAASf,MAAOsB,EAAgBe,EAAY0F,gBAcnL,kBAAC,EAAD,CAAKlG,UAAWA,EAAWF,UAAWmF,EAAclF,OAAQ8E,EAAW5E,KAAM8E,KAE7E,kBAACvG,EAAA,EAAD,CAAME,UAAU,cACd,kBAACC,EAAA,EAAD,KACE,+DACA,kBAAC,EAAD,CAAOmB,UAAW4E,IAClB,wBAAIhG,UAAU,mBAAd,iBAA+CsB,GAC/C,kBAAC,EAAD,CAAWtB,UAAU,aAAasB,UAAWA,QC1GnCmG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.f200616d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card,CardContent,Typography } from '@material-ui/core';\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox({title,cases,total,active,isRed, ...props}) {\r\n    return (\r\n        <Card\r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"\r\n          }`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                Total {total}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle,Popup} from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\nexport const sortData=(data)=>{\r\n    const sortedData=[...data];\r\n\r\n    sortedData.sort((a,b) => {\r\n        if(a.cases>b.cases){\r\n            return -1;                          //false\r\n        }\r\n        else{\r\n            return 1;                           //true\r\n        }\r\n    })\r\n    return sortedData;\r\n\r\n    //return sortedData.sort((a,b)=> a.cases>b.cases?-1:1);                                  we can use this code also\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n\r\n//draw circles on map with interactive tool tips\r\nexport const showDataOnMap=(data,casesType=\"cases\") => (\r\n    data.map(country=>(\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        fillOpacity={0.4}\r\n        radius={\r\n          Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n      >\r\n        <Popup>\r\n          <div className=\"info-container\">\r\n            <div\r\n              className=\"info-flag\"\r\n              style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n            ></div>\r\n            <div className=\"info-name\">{country.country}</div>\r\n            <div className=\"info-confirmed\">\r\n              Cases: {numeral(country.cases).format(\"0,0\")}\r\n            </div>\r\n            <div className=\"info-recovered\">\r\n              Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n            </div>\r\n            <div className=\"info-deaths\">\r\n              Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n            </div>\r\n          </div>\r\n        </Popup>\r\n      </Circle>\r\n    )));\r\n","import React from 'react';\r\nimport './Map.css';\r\nimport {Map as LeafletMap,TileLayer} from 'react-leaflet';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries,center,casesType, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries,casesType)}\r\n      </LeafletMap>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\n//import numeral from 'numeral';\r\nimport './Table.css';\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({name,cases})=>(\r\n                <tr>\r\n                    <td>{name}</td>\r\n                    <td>\r\n                        <strong>{cases}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React,{useState,useEffect} from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options={\r\n    legend: {\r\n        display: false,\r\n      },\r\n      elements: {\r\n        point: {\r\n          radius: 0,\r\n        },\r\n},\r\nmaintainAspectRatio: false,\r\ntooltips: {\r\n  mode: \"index\",\r\n  intersect: false,\r\n  callbacks: {\r\n    label: function (tooltipItem, data) {\r\n      return numeral(tooltipItem.value).format(\"+0,0\");\r\n    },\r\n  },\r\n},\r\nscales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n}\r\n\r\n\r\n\r\nfunction LineGraph({casesType,...props}) {\r\n    const [data,setData]=useState({});\r\n\r\n    const buildChartData= (data,casesType) =>{\r\n        const chartData=[];\r\n        let lastDataPoint;\r\n        for(let date in data.cases){\r\n            if(lastDataPoint){\r\n                const newDataPoint={\r\n                    x:date,\r\n                    y:data['cases'][date] -lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint=data[casesType][date];\r\n        }\r\n        return chartData;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData=async ()=> {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setData(data);\r\n                console.log(data);\r\n                const chartData=buildChartData(data,casesType);\r\n                setData(chartData);\r\n            });\r\n        }\r\n            fetchData();\r\n        },[casesType]);\r\n       \r\n    \r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length>0 &&(\r\n                <Line\r\n                options={options}\r\n                data={{\r\n                    datasets:[{\r\n                        backgroundColor:\"rgba(204,16,52,0.5)\",\r\n                        borderColor:\"#CC1034\",\r\n                        data:data}\r\n                    ]\r\n                }}/>\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LineGraph\r\n","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport { FormControl,MenuItem,Select,Card,CardContent} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport {sortData,prettyPrintStat} from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries,setCountries]=useState([]);\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo,setCountryInfo] = useState({});              //empty object\n  const [tableData,setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries,setMapCountries]= useState([]);\n  const [casesType,setCasesType] =useState(\"cases\");\n\n  useEffect(() =>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response)=>response.json())\n    .then((data)=>{\n      setCountryInfo(data);\n    })\n  },[])\n\n  useEffect(()=>{\n    //async -> send a request, wait for it, do something with info\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json())\n      .then((data)=>{\n        const countries=data.map((country)=>(\n          {\n          name:country.country,                   //India,United Kingdom\n          value:country.countryInfo.iso2,       //IN,UK\n          cases:country.cases,\n          todayCases:country.todayCases\n        }\n        ));\n        const sortedData=sortData(countries);\n        setCountries(countries);\n        console.log(countries);\n        setTableData(sortedData);\n        setMapCountries(data);\n      })\n    }\n    console.log(\"countries\",tableData)\n    \n    getCountriesData();\n  },[]);\n\n\n  const onCountryChange = async (event) => {\n    const countryCode=event.target.value;\n    \n\n    const url= countryCode === \"Worldwide\" ? 'https://disease.sh/v3/covid-19/all' :\n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data =>{\n      setInputCountry(countryCode);               //sets the input to select box\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n      setMapZoom(4);\n    })\n  }\n  console.log(countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n      <h1>COVID-19 Tracker</h1>\n      <FormControl className=\"app__dropdown\">\n      <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n         <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          {\n            countries.map((country)=>(\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n            ))\n          }\n        </Select>\n      </FormControl>\n      </div>\n      <div className=\"app__stats\">\n        <InfoBox onClick={e =>setCasesType('cases')} active={casesType === \"cases\"} title=\"Coronavirus Cases\" isRed total={prettyPrintStat(countryInfo.cases)} cases={prettyPrintStat(countryInfo.todayCases)}/>\n        <InfoBox onClick={e=>setCasesType('recovered')} active={casesType === \"recovered\"} title=\"Recovered\" total={prettyPrintStat(countryInfo.recovered)} cases={prettyPrintStat(countryInfo.todayRecovered)}/>\n        <InfoBox onClick={e=>setCasesType('deaths')} active={casesType === \"deaths\"} title=\"Deaths\" isRed total={prettyPrintStat(countryInfo.deaths)} cases={prettyPrintStat(countryInfo.todayDeaths)}/>\n      </div>\n      \n      {/*header*/}\n      {/*title+ dropdown*/}\n\n      {/*infoboxes*/}\n      {/*infoboxes*/}\n      {/*infoboxes*/}\n\n      {/*table*/}\n      {/*graph*/}\n\n      {/*map*/}\n      <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Number of Cases by Country</h3>\n          <Table countries={tableData}/>\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}